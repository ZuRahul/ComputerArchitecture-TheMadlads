#include "cache.h"

#define maxRRPV 5
#define NUM_POLICY 3
#define SDM_SIZE 32
#define TOTAL_SDM_SETS NUM_CPUS*NUM_POLICY*SDM_SIZE
#define BIP_MAX 32
#define PSEL_WIDTH 10
#define PSEL_MAX ((1<<PSEL_WIDTH)-1)
#define PSEL_INIT PSEL_MAX/2

uint32_t rrpv[LLC_SET][LLC_WAY],
         bip_counter = 0;

unsigned rand_sets[TOTAL_SDM_SETS];
uint32_t PSEL[NUM_CPUS][NUM_POLICY];

void tracker_init() 
{
    srand(time(NULL));
    unsigned long rand_seed = rand();
    unsigned long max_rand = 1048576;
    uint32_t my_set = LLC_SET;
    int do_again = 0;
    for (int i=0; i<TOTAL_SDM_SETS; i++) {
        do {
            do_again = 0;
            rand_seed = rand_seed * 1103515245 + 12345;
            rand_sets[i] = ((unsigned) ((rand_seed/65536) % max_rand)) % my_set;
            for (int j=0; j<i; j++) {
                if (rand_sets[i] == rand_sets[j]) {
                    do_again = 1;
                    break;
                }
            }
        } while (do_again);
    }

    for(int i=0; i<NUM_CPUS; i++)
	for(int j=0; j<NUM_POLICY; j++)
	    PSEL[i][j]=PSEL_INIT;
}

void update_PSEL(int cpu, int policy)
{
    int check=0;
    for(int i=0; i<NUM_POLICY; i++) {
	if(i==policy)
	    check = ((PSEL[cpu][i]+NUM_POLICY-1) > PSEL_MAX);
	else
	    check = (PSEL[cpu][i]==0);
	if(check)
	    return;
    }
    for(int i=0; i<NUM_POLICY; i++) {
	if(i==policy)
	    PSEL[cpu][i]+=NUM_POLICY-1;
	else
	    PSEL[cpu][i]--;
    }
}

int global_policy(int cpu)
{
    int min_idx=0;
    for(int i=1; i<NUM_POLICY; i++)
	min_idx = PSEL[cpu][i] < PSEL[cpu][min_idx] ? i : min_idx;
    return min_idx;
}


void CACHE::llc_initialize_replacement()
{
    cout << "Initialize DRRIP state" << endl;

    for(int i=0; i<LLC_SET; i++) {
        for(int j=0; j<LLC_WAY; j++)
            rrpv[i][j] = maxRRPV;
    }

    tracker_init();
}

int is_it_leader(uint32_t cpu, uint32_t set)
{
    uint32_t start = cpu * NUM_POLICY * SDM_SIZE,
             end = start + NUM_POLICY * SDM_SIZE;

    for (uint32_t i=start; i<end; i++)
        if (rand_sets[i] == set)
            return ((i - start) / SDM_SIZE);

    return -1;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    // do not update replacement state for writebacks
    if (type == WRITEBACK) {
        rrpv[set][way] = maxRRPV-1;
        return;
    }
    if (type!=PREFETCH && hit) {
	rrpv[set][way] = 0;
	return;
    }

// H : P-DP, nP-DP, nP-nDP

	if(type==PREFETCH && hit && block[set][way].prefetch)
		return;
    int leader = is_it_leader(cpu, set);    

    	int pol = leader;
	if(leader==-1)
            pol = global_policy(cpu);
        switch(pol) {
            case 1: //SRRIP+P-DP
		if(hit && type==PREFETCH) {
			rrpv[set][way] = rrpv[set][way] > 0 ? rrpv[set][way]-1 : 0;
			return; 		
		}
		rrpv[set][way] = maxRRPV-1;
                break;
            case 2: //SRRIP+nP-DP
		if(type==PREFETCH) {
			if(hit) 
				rrpv[set][way] = rrpv[set][way] > 0 ? rrpv[set][way]-1 : 0;		
			else
				rrpv[set][way] = maxRRPV;
			return;
		}
		rrpv[set][way] = maxRRPV-1;
                break;
	    case 3: //SRRIP+nP-nDP
		if(type==PREFETCH) {
			rrpv[set][way] = maxRRPV;
			return;
		}
		rrpv[set][way] = maxRRPV-1;
                break;
	    case 4: //BRRIP+nP-DP
		if(type==PREFETCH) {
			if(hit) 
				rrpv[set][way] = rrpv[set][way] > 0 ? rrpv[set][way]-1 : 0;		
			else
				rrpv[set][way] = maxRRPV;
			return;
		}
		rrpv[set][way] = maxRRPV;
		bip_counter++;
		if (bip_counter == BIP_MAX) bip_counter = 0;
		if (bip_counter == 0) rrpv[set][way] = maxRRPV-1;
                break;
            default: //BRRIP+nP-nDP
		rrpv[set][way] = maxRRPV;
		bip_counter++;
		if (bip_counter == BIP_MAX) bip_counter = 0;
		if (bip_counter == 0) rrpv[set][way] = maxRRPV-1;
                break;
	    }
    
	if(type!=PREFETCH && !hit && leader!=-1)
		update_PSEL(cpu, leader);
	
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // look for the maxRRPV line
    while (1)
    {
        for (int i=0; i<LLC_WAY; i++)
            if (rrpv[set][i] == maxRRPV)
                return i;

        for (int i=0; i<LLC_WAY; i++)
            rrpv[set][i]++;
    }

    // WE SHOULD NOT REACH HERE
    assert(0);
    return 0;
}

// use this function to print out your own stats at the end of simulation
void CACHE::llc_replacement_final_stats()
{

}
